{"version":3,"sources":["main.js"],"names":["devMode","openNotifyApi","dataFetchInterval","map","OpenLayers","Map","markers","Layer","Markers","issMarker","addLayer","data","latitude","longitude","drawMap","drawDetails","getData","setInterval","fetch","then","response","json","iss_position","position","OSM","lonLat","LonLat","transform","Projection","getProjectionObject","zoom","removeMarker","Marker","addMarker","setCenter","document","querySelector","innerHTML"],"mappings":"AAAA,IAAMA,OAAO,GAAG,KAAhB,EAAuB;;AACvB,IAAMC,aAAa,GAAG,yCAAtB;AACA,IAAMC,iBAAiB,GAAG,KAA1B;AACA,IAAMC,GAAG,GAAG,IAAIC,UAAU,CAACC,GAAf,CAAmB,QAAnB,CAAZ;AACA,IAAMC,OAAO,GAAG,IAAIF,UAAU,CAACG,KAAX,CAAiBC,OAArB,CAA6B,SAA7B,CAAhB;AACA,IAAIC,SAAJ;AACAN,GAAG,CAACO,QAAJ,CAAaJ,OAAb;;AAEA,IAAIN,OAAJ,EAAa;AACZ,MAAMW,IAAI,GAAG;AAAEC,IAAAA,QAAQ,EAAE,SAAZ;AAAuBC,IAAAA,SAAS,EAAE;AAAlC,GAAb;AACAC,EAAAA,OAAO,CAACH,IAAD,CAAP;AACAI,EAAAA,WAAW,CAACJ,IAAD,CAAX;AACA,CAJD,MAIO;AACNK,EAAAA,OAAO;AACPC,EAAAA,WAAW,CAACD,OAAD,EAAUd,iBAAV,CAAX;AACA;;AAED,SAASc,OAAT,GAAmB;AAClBE,EAAAA,KAAK,CAACjB,aAAD,CAAL,CACEkB,IADF,CACO,UAACC,QAAD,EAAc;AACnB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACA,GAHF,EAIEF,IAJF,CAIO,UAACR,IAAD,EAAU;AACfG,IAAAA,OAAO,CAACH,IAAI,CAACW,YAAN,CAAP;AACAP,IAAAA,WAAW,CAACJ,IAAI,CAACW,YAAN,CAAX;AACA,GAPF;AAQA;AACD;;;;;;;AAMA,SAASR,OAAT,CAAiBS,QAAjB,EAA2B;AAC1BpB,EAAAA,GAAG,CAACO,QAAJ,CAAa,IAAIN,UAAU,CAACG,KAAX,CAAiBiB,GAArB,EAAb;AAEA,MAAMC,MAAM,GAAG,IAAIrB,UAAU,CAACsB,MAAf,CAAsBH,QAAQ,CAACV,SAA/B,EAA0CU,QAAQ,CAACX,QAAnD,EACbe,SADa,CAEb,IAAIvB,UAAU,CAACwB,UAAf,CAA0B,WAA1B,CAFa,EAGbzB,GAAG,CAAC0B,mBAAJ,EAHa,CAAf;AAMA,MAAMC,IAAI,GAAG,CAAb;AACAxB,EAAAA,OAAO,CAACyB,YAAR,CAAqBtB,SAArB;AACAA,EAAAA,SAAS,GAAG,IAAIL,UAAU,CAAC4B,MAAf,CAAsBP,MAAtB,CAAZ;AACAnB,EAAAA,OAAO,CAAC2B,SAAR,CAAkBxB,SAAlB;AACAN,EAAAA,GAAG,CAAC+B,SAAJ,CAAcT,MAAd,EAAsBK,IAAtB;AACA;;AAED,SAASf,WAAT,CAAqBQ,QAArB,EAA+B;AAC9BY,EAAAA,QAAQ,CAACC,aAAT,CAAuB,WAAvB,EAAoCC,SAApC,qBAA4Dd,QAAQ,CAACX,QAArE,qBAAwFW,QAAQ,CAACV,SAAjG;AACA","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["const devMode = false; // use mocked lat long so we don't spam the API\nconst openNotifyApi = 'http://api.open-notify.org/iss-now.json';\nconst dataFetchInterval = 30000;\nconst map = new OpenLayers.Map(\"mapdiv\");\nconst markers = new OpenLayers.Layer.Markers(\"Markers\");\nlet issMarker;\nmap.addLayer(markers);\n\nif (devMode) {\n\tconst data = { latitude: \"-6.7052\", longitude: \"46.7854\" };\n\tdrawMap(data);\n\tdrawDetails(data);\n} else {\n\tgetData();\n\tsetInterval(getData, dataFetchInterval);\n}\n\nfunction getData() {\n\tfetch(openNotifyApi)\n\t\t.then((response) => {\n\t\t\treturn response.json();\n\t\t})\n\t\t.then((data) => {\n\t\t\tdrawMap(data.iss_position);\n\t\t\tdrawDetails(data.iss_position);\n\t\t});\n}\n/* function drawMarker() {\n\tvar size = new OpenLayers.Size(21, 25);\n\tvar offset = new OpenLayers.Pixel(-(size.w / 2), -size.h);\n\tvar icon = new OpenLayers.Icon('http://www.openlayers.org/dev/img/marker.png', size, offset);\n} */\n\nfunction drawMap(position) {\n\tmap.addLayer(new OpenLayers.Layer.OSM());\n\n\tconst lonLat = new OpenLayers.LonLat(position.longitude, position.latitude)\n\t\t.transform(\n\t\t\tnew OpenLayers.Projection(\"EPSG:4326\"),\n\t\t\tmap.getProjectionObject()\n\t\t);\n\n\tconst zoom = 1;\n\tmarkers.removeMarker(issMarker);\n\tissMarker = new OpenLayers.Marker(lonLat);\n\tmarkers.addMarker(issMarker);\n\tmap.setCenter(lonLat, zoom);\n}\n\nfunction drawDetails(position) {\n\tdocument.querySelector('#location').innerHTML = (`<p>lat: ${position.latitude}, long: ${position.longitude}</p>`);\n}\n"]}